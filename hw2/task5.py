# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.
#
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
#
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
#
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
#
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
#
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].
#

# ниже идет подготовка списка - ее можно заменить

# l1=input("Введите строку, которая будет преобразована в список - \nразделитель элементов Вы сможете указать на следующем шаге: \n")
# splitter=input("Укажите разделитель элементов списка: ")
# l1=l1.split(splitter) # элементы надо проверить на натуральные числа и привести к int - как ниже с новым значением
# l1.sort(reverse=True)

def find_closest(lst,val):
    res_el = min_delta = None
    for el in lst:
        delta_val = abs(el - val)
        if min_delta is None or delta_val < min_delta:
            res_el, min_delta = el, delta_val
    return (res_el)

l1 = [7, 5, 3, 3, 2]

print(l1)

while True:
    new_val=input("Введите новое значение рейтинга [1-9] или 'S' для остановки: ")
#если нам важна что новое значение - именно натуральное число
    if new_val.isdigit() and 1 <= int(new_val) <= 9: #проверяем натуральное ли число ввели
        new_val=int(new_val)
        if l1.count(new_val)>0: #ищем введенный рейтинг в текущей таблице
            try: #если нашли - добавляем после последнего найденного значения в списке
                l1.insert(max(loc for loc, val in enumerate(l1) if val == new_val)+1,new_val)
            except Exception as err:
                print(err)
        else: #если не нашли - 3 варианта
            if new_val > l1[0]: #новое значение больше первого (нулевого) элемента списка
                l1.insert(0, new_val) #добавляем в начало
            elif new_val < l1[-1]: #второй вариант - новое значение меньше последнего элемента списка
                 l1.append(new_val) #добавляем в конец
            else: #третий сценарий - такого элемента нет еще в списке, но добавлять надо где-то внутри
                res = find_closest(l1,new_val) #ищем ближайшее значение
                # print("res", res)
                l1.insert(max(loc for loc, val in enumerate(l1) if val == res) + 1, new_val)
        print (l1)
    else:
        print(new_val)
        break